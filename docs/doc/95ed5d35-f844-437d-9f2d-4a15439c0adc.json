{
    "summary": "The code imports libraries, defines flags and functions for model types and demo instructions, reads images, logs information, performs inference using the agent's act method, defines a function for Octo model inference, prints output of three images to console, and initializes FLAGS for app.run().",
    "details": [
        {
            "comment": "The code is importing necessary libraries, defining flags for different model types and demo instructions. It also defines a function to load demo images which suppresses noisy PIL warnings by changing the logging level temporarily. The main purpose seems to be running inference on given instructions using specified model type.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/robo_transformers/demo.py\":0-36",
            "content": "import tensorflow as tf\nimport numpy as np\nimport PIL.Image as Image\nfrom robo_transformers.registry import REGISTRY\nfrom importlib.resources import files\nfrom absl import logging, flags, app\nimport os\nimport sys\nfrom pprint import pprint\nfrom robo_transformers.abstract.agent import Agent\nfrom robo_transformers.abstract.action import Action\nFLAGS = flags.FLAGS\nflags.DEFINE_string(\n    \"demo_instruction\", \"pick up the block\", \"The instruction to run inference on.\"\n)\nflags.DEFINE_string(\n    \"model_type\",\n    \"octo\",\n    \"Which model to load. Must be one of: \" + str(REGISTRY.keys()),\n)\nflags.DEFINE_boolean(\"show_images\", False, \"Whether or not to show the demo images.\")\ndef get_demo_images(output=None) -> np.ndarray:\n    \"\"\"Loads a demo video from the directory.\n    Returns:\n        list[tf.Tensor]: A list of tensors of shape (batch_size, HEIGHT, WIDTH, 3).\n    \"\"\"\n    # Suppress noisy PIL warnings.\n    log_level = logging.get_verbosity()\n    if logging.get_verbosity() < 2:\n        logging.set_verbosity(logging.ERROR)"
        },
        {
            "comment": "Code snippet creates a list of image file paths, reads the images and converts them to numpy arrays in RGB format. It then logs information with a specified log level, and returns the images. The `run_demo` function takes an Agent instance as input, fetches demo images, and performs actions for each image step based on the agent's act method. The main function enables debugging if logging is set to debug level.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/robo_transformers/demo.py\":38-73",
            "content": "    filenames = [\n        files(\"robo_transformers\").joinpath(\"demo_imgs/gripper_far_from_grasp.png\"),\n        files(\"robo_transformers\").joinpath(\"demo_imgs/gripper_mid_to_grasp.png\"),\n        files(\"robo_transformers\").joinpath(\"demo_imgs/gripper_almost_grasp.png\"),\n    ]\n    images = []\n    for fn in filenames:\n        img = Image.open(fn)\n        if FLAGS.show_images and output is not None:\n            img.save(os.path.join(output, fn.name))\n        img = np.array(img.convert(\"RGB\"))\n        images.append(img)\n    logging.set_verbosity(log_level)\n    return images\ndef run_demo(agent: Agent) -> list[Action]:\n    # Pass in an instruction through the --demo_instruction flag.\n    actions = []\n    images = get_demo_images(output=os.getcwd())\n    for step in range(3):\n        action = agent.act(\n            FLAGS.demo_instruction,\n            images[step],\n        )\n        pprint(action)\n        print(\" \")\n        actions.append(action)\n    return actions\ndef main(_):\n    if logging.level_debug():\n        tf.debugging.experimental.enable_dump_debug_info("
        },
        {
            "comment": "The code defines a function that runs inference on a pre-trained Octo model. It uses the \"run_demo\" function from the REGISTRY with the specified model type, and then prints the output of three images to the console. The \"--instruction\" flag can be used for custom input.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/robo_transformers/demo.py\":74-103",
            "content": "            \"./runs\", tensor_debug_mode=\"FULL_HEALTH\", circular_buffer_size=-1\n        )\n    # Run three time steps of inference using the demo images.\n    # Pass in an instruction via the command line.\n    agent: Agent = REGISTRY[FLAGS.model_type]['agent']()\n    run_demo(agent)\nif __name__ == \"__main__\":\n    if \"--help\" in sys.argv or \"-h\" in sys.argv:\n        print(\n            \"\"\"\n        Octo Inference Demo\n        -------------------\n        This demo runs inference on a pretrained Octo model.\n        The demo will run inference on three images from the demo_imgs directory\n        and print the output to the console.\n        You can also pass in a custom instruction via the --instruction flag.\n        To run the demo, use the following command:\n        python3 -m robo_transformers.demo --model_type=octo --instruction=\"pick block\"\n        \"\"\"\n        )\n    app.run(main)\nelse:\n    # TODO (speralta): Consider reading in flags from argv\n    # CAREFUL: This will crash if you allow flags from argv that haven't been"
        },
        {
            "comment": "The code snippet initializes the FLAGS using the program name as input. It appears to be a part of an application that uses app.run() and sets flags for it. The purpose might be to provide command-line arguments or configuration options.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/robo_transformers/demo.py\":104-107",
            "content": "    # defined.\n    # For now, only apps that use app.run() can set flags.\n    # Read in the program name\n    FLAGS(sys.argv[0:1])"
        }
    ]
}