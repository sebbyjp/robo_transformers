{
    "summary": "Test function checks the functionality of an InferenceServer in dummy mode, ensuring consistent negative output actions for the same instruction and image, and correct lengths of action elements.",
    "details": [
        {
            "comment": "Test function initializes an InferenceServer with dummy set to True. Opens a demo image and converts it to a numpy array. Calls inference on the server twice, passing the image and \"test\" instruction, saving the results. Asserts that the resulting actions are not None or empty dictionaries, have expected lengths for specific keys, and checks if the values of one action are opposite to the values of another action.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/tests/test_inference_server.py\":0-24",
            "content": "from robo_transformers.inference_server import InferenceServer\nfrom importlib.resources import files\nfrom PIL import Image\nimport numpy as np\ndemo_img = files(\"robo_transformers\").joinpath(\"demo_imgs/gripper_almost_grasp.png\")\ndef test_dummy():\n    inference = InferenceServer(dummy=True)\n    img = np.array(Image.open(demo_img))\n    action0 = inference(instruction=\"test\", image=img, save=True)\n    assert action0 is not None and action0 != {}\n    assert len(action0.get('base_displacement_vector')) == 2\n    assert len(action0.get('base_displacement_vertical_rotation')) == 1\n    assert len(action0.get('gripper_closedness_action')) == 1\n    assert len(action0.get('rotation_delta')) == 3\n    assert len(action0.get('terminate_episode')) == 3\n    assert len(action0.get('world_vector')) == 3\n    action1 = inference(instruction=\"test\", image=img, save=True)\n    for k, v in action1.items():\n        assert np.array_equal(v ,-action0[k])\n    action2 = inference(instruction=\"test\", image=img, save=True)\n    for k, v in action2.items():"
        },
        {
            "comment": "The code is testing the functionality of an InferenceServer by running it in dummy mode. It asserts that the output actions for the same instruction and image are negative values of each other, ensuring consistency. The code also verifies the lengths of specific action elements to confirm they have the correct number of values. The test runs three times to ensure the consistency of outputs for the same input.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/tests/test_inference_server.py\":25-48",
            "content": "        assert np.array_equal(v ,-action1[k])\n# def test_dummy():\n#     inference = InferenceServer(dummy=True)\n#     img = np.array(Image.open(demo_img))\n#     action0 = inference(instruction=\"test\", image=img, save=True)\n#     assert action0 is not None and action0 != {}\n#     assert len(action0.get('base_displacement_vector')) == 2\n#     assert len(action0.get('base_displacement_vertical_rotation')) == 1\n#     assert len(action0.get('gripper_closedness_action')) == 1\n#     assert len(action0.get('rotation_delta')) == 3\n#     assert len(action0.get('terminate_episode')) == 3\n#     assert len(action0.get('world_vector')) == 3\n#     action1 = inference(instruction=\"test\", image=img, save=True)\n#     for k, v in action1.items():\n#         assert np.array_equal(v ,-action0[k])\n#     action2 = inference(instruction=\"test\", image=img, save=True)\n#     for k, v in action2.items():\n#         assert np.array_equal(v ,-action1[k])\nif __name__ == '__main__':\n    test_dummy()"
        }
    ]
}