{
    "summary": "The code sets up the Robotic Transformers library, introduces a package for model inference, and defines data types/specifications for reinforcement learning models. It includes an action dictionary with specified actions and their attributes, and suggests rendering these specs in a prettier format.",
    "details": [
        {
            "comment": "This code provides instructions for installing and running Robotic Transformers library, specifically RT-1, RT-X-1, and Octo. It also shows badges for Code Coverage, Ubuntu and MacOS workflows. Requirements include python 3.9 or higher.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/README.md\":0-28",
            "content": "# Library for Robotic Transformers. RT-1, RT-X-1, Octo\n[![Code Coverage](https://codecov.io/gh/sebbyjp/dgl_ros/branch/code_cov/graph/badge.svg?token=9225d677-c4f2-4607-a9dd-8c22446f13bc)](https://codecov.io/gh/sebbyjp/dgl_ros)\n[![ubuntu | python 3.11 | 3.10 | 3.9](https://github.com/sebbyjp/robo_transformers/actions/workflows/ubuntu.yml/badge.svg)](https://github.com/sebbyjp/robo_transformers/actions/workflows/ubuntu.yml)\n[![macos | python 3.11 | 3.10 | 3.9](https://github.com/sebbyjp/robo_transformers/actions/workflows/macos.yml/badge.svg)](https://github.com/sebbyjp/robo_transformers/actions/workflows/macos.yml)\n## Installation\nRequirements:\npython >= 3.9\n### From Source\nClone this repo:\n`git clone https://github.com/sebbyjp/robo_transformers.git`\nInstall requirements:\n`python -m pip install --upgrade pip`\n`cd robo_transformers && pip install -r requirements.txt`\n## Run Octo inference on demo images\n`python -m robo_transformers.demo`\n## Run RT-1 Inference On Demo Images\n`python -m robo_transformers.models.rt1.inference`"
        },
        {
            "comment": "This code snippet introduces a package called \"robo_transformers\" that provides inference functionality for robot transformer models. The README explains how to run inference, usage instructions, and data types involved. It mentions the use of an InferenceServer class, specifying an instruction and image, and returning an action.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/README.md\":30-63",
            "content": "## See usage\nYou can specify a custom checkpoint path or the model_keys for the three mentioned in the RT-1 paper as well as RT-X.\n`python -m robo_transformers.models.rt1.inference --help`\n## Run Inference Server\nThe inference server takes care of all the internal state so all you need to specify is an instruction and image.\n```python\nfrom robo_transformers.inference_server import InferenceServer\nimport numpy as np\n# Somewhere in your robot control stack code...\ninstruction = \"pick block\"\nimg = np.random.randn(256, 320, 3) # Width, Height, RGB\ninference = InferenceServer()\naction = inference(instruction, img)\n```\n## Data Types\n`action, next_policy_state = model.act(time_step, curr_policy_state)`\n### policy state is internal state of network\nIn this case it is a 6-frame window of past observations,actions and the index in time.\n```python\n{'action_tokens': ArraySpec(shape=(6, 11, 1, 1), dtype=dtype('int32'), name='action_tokens'),\n 'image': ArraySpec(shape=(6, 256, 320, 3), dtype=dtype('uint8'), name='image'),"
        },
        {
            "comment": "The code defines the structure of a dictionary that stores various inputs and parameters for the robot. 'step_num' and 't' are both 1D arrays of type int32, and 'discount', 'observation', etc., are also defined as different types of data structures. The observation contains multiple elements such as base_pose_tool_reached, gripper_closed, and natural_language_embedding, each having a specific shape and data type. Time step is the input from the environment that the robot receives and processes to take its actions.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/README.md\":64-77",
            "content": " 'step_num': ArraySpec(shape=(1, 1, 1, 1), dtype=dtype('int32'), name='step_num'),\n 't': ArraySpec(shape=(1, 1, 1, 1), dtype=dtype('int32'), name='t')}\n ```\n### time_step is the input from the environment\n```python\n{'discount': BoundedArraySpec(shape=(), dtype=dtype('float32'), name='discount', minimum=0.0, maximum=1.0),\n 'observation': {'base_pose_tool_reached': ArraySpec(shape=(7,), dtype=dtype('float32'), name='base_pose_tool_reached'),\n                 'gripper_closed': ArraySpec(shape=(1,), dtype=dtype('float32'), name='gripper_closed'),\n                 'gripper_closedness_commanded': ArraySpec(shape=(1,), dtype=dtype('float32'), name='gripper_closedness_commanded'),\n                 'height_to_bottom': ArraySpec(shape=(1,), dtype=dtype('float32'), name='height_to_bottom'),\n                 'image': ArraySpec(shape=(256, 320, 3), dtype=dtype('uint8'), name='image'),\n                 'natural_language_embedding': ArraySpec(shape=(512,), dtype=dtype('float32'), name='natural_language_embedding'),"
        },
        {
            "comment": "This code defines the data types and their specifications for a reinforcement learning model. It includes various arrays for different variables such as 'natural_language_instruction', 'orientation_box', 'rotation_delta_to_go', etc., with their respective shapes, data types, and names. The 'reward' and 'step_type' are also specified as single-element arrays of float32 and int32 respectively.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/README.md\":78-87",
            "content": "                 'natural_language_instruction': ArraySpec(shape=(), dtype=dtype('O'), name='natural_language_instruction'),\n                 'orientation_box': ArraySpec(shape=(2, 3), dtype=dtype('float32'), name='orientation_box'),\n                 'orientation_start': ArraySpec(shape=(4,), dtype=dtype('float32'), name='orientation_in_camera_space'),\n                 'robot_orientation_positions_box': ArraySpec(shape=(3, 3), dtype=dtype('float32'), name='robot_orientation_positions_box'),\n                 'rotation_delta_to_go': ArraySpec(shape=(3,), dtype=dtype('float32'), name='rotation_delta_to_go'),\n                 'src_rotation': ArraySpec(shape=(4,), dtype=dtype('float32'), name='transform_camera_robot'),\n                 'vector_to_go': ArraySpec(shape=(3,), dtype=dtype('float32'), name='vector_to_go'),\n                 'workspace_bounds': ArraySpec(shape=(3, 3), dtype=dtype('float32'), name='workspace_bounds')},\n 'reward': ArraySpec(shape=(), dtype=dtype('float32'), name='reward'),\n 'step_type': ArraySpec(shape=(), dtype=dtype('int32'), name='step_type')}"
        },
        {
            "comment": "The code defines a dictionary containing various action specifications, such as base displacement vector, gripper closedness action, rotation delta, terminate episode, and world vector. These specifications have bounded arrays with defined shapes, data types, names, and minimum/maximum values. The TODO suggests rendering these action, policy state, and observation specs in a prettier format like a pandas data frame.",
            "location": "\"/media/root/Prima/works/robo_transformers/docs/src/README.md\":88-103",
            "content": " ```\n### action\n```python\n{'base_displacement_vector': BoundedArraySpec(shape=(2,), dtype=dtype('float32'), name='base_displacement_vector', minimum=-1.0, maximum=1.0),\n 'base_displacement_vertical_rotation': BoundedArraySpec(shape=(1,), dtype=dtype('float32'), name='base_displacement_vertical_rotation', minimum=-3.1415927410125732, maximum=3.1415927410125732),\n 'gripper_closedness_action': BoundedArraySpec(shape=(1,), dtype=dtype('float32'), name='gripper_closedness_action', minimum=-1.0, maximum=1.0),\n 'rotation_delta': BoundedArraySpec(shape=(3,), dtype=dtype('float32'), name='rotation_delta', minimum=-1.5707963705062866, maximum=1.5707963705062866),\n 'terminate_episode': BoundedArraySpec(shape=(3,), dtype=dtype('int32'), name='terminate_episode', minimum=0, maximum=1),\n 'world_vector': BoundedArraySpec(shape=(3,), dtype=dtype('float32'), name='world_vector', minimum=-1.0, maximum=1.0)}\n ```\n## TODO\n- Render action, policy_state, observation specs in something prettier like pandas data frame."
        }
    ]
}